<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spider_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 1;
image_speed = .1;
_draw_sprite = spr_spider_idle;
aggro = false;
turning_aggro = false;
moving = false;
mov_dir = "right";
image_xscale = 2;
image_yscale = 2;
turning = false;
attacking = false;
inactive = false;
cur_health = 10;
dead = false;
dead_animation_finished = false;
jump_back = false;
reset = false;
attack_phase = "none";
slash_used = false;
thrusting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_draw_sprite = spr_spider_aggro_walk;
reset = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inactive = false;
jump_back = true;
_draw_sprite = spr_spider_jump_back;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_speed = .5;
gravity = 1;
//image_speed = .1;
if(dead==false){
    image_index += .5;


    // check which way to face
    
    if(obj_player.x &gt; self.x-80 ){
        if(mov_dir == "left"){
            mov_dir = "right";
            _draw_sprite = spr_spider_aggro_turn;
            turning = true;
            image_index = 0;
            image_xscale = 2;
        }
    }else{
        if(mov_dir=="right"){
            mov_dir = "left";
            _draw_sprite = spr_spider_aggro_turn;
            turning = true;
            image_index = 0;
            image_xscale = -2;
             
        }
    }
    // define better movement
    /*
    if(aggro == true &amp;&amp; attacking == false){
        if(mov_dir=="left"){
                hspeed = -10;
        }else{
                hspeed = 10;
        }
    }
    */
    
    if(distance_to_object(obj_player)&lt;300 &amp;&amp; aggro == false &amp;&amp; turning == false){
        aggro = true;
        _draw_sprite = spr_spider_to_aggro;
        turning_aggro = true;
        image_index = 0;
    }else if(distance_to_object(obj_player)&gt;300 &amp;&amp; aggro == false) {
        _draw_sprite = spr_spider_idle;
    }
    // temp idea
    
    if(distance_to_object(obj_player)&lt;50 &amp;&amp; aggro == true &amp;&amp; attacking == false &amp;&amp; inactive = false &amp;&amp; jump_back = false){
        attacking = true;
        if(slash_used == false){
            _draw_sprite = spr_spider_aggro_left_slash;
            slash_used = true;
            attack_phase = "one";
        }else{
            _draw_sprite = spr_spider_aggro_thrust;
            thrusting = true;
        }
        image_index = 0;
    }
}


// handle animation specific stuff here
if(jump_back == true){
    if(0 &lt;= image_index &lt;= 2){
        if(mov_dir == "left" &amp;&amp; thrusting == false){
            move_towards_point(self.x+200, self.y-100, 12);
        }else{
            if(thrusting == false){
                move_towards_point(self.x-200, self.y-100, 12);
            }
        }
        if(reset == false){
            alarm[1] = 24;    
        }
        reset = true;   
    } 
    if(image_index &gt; 9){
        jump_back = false;
    } 
}
if(dead == true){
    if(image_index &gt; 10){
        image_speed = 0;
        image_index = 10
        dead_animation_finished = true;
    }
}
if(attacking==true){    
    if(image_index &gt; 11){
        if(attack_phase == "two"){
            _draw_sprite = spr_spider_aggro_walk;
            attacking = false;
            inactive = true;
            alarm[0] = 6;
            attack_phase = "thrust";
        }else if(attack_phase == "one"){
            _draw_sprite = spr_spider_aggro_right_slash;
            attack_phase = "two";
            image_index = 0;
        }
    }
}
if(inactive==true){
    if(image_index &gt; 4){
        image_index = 3;
    }
}
if(turning_aggro == true){
    if(image_index &gt; 6){
        turning_aggro = false;
        _draw_sprite = spr_spider_aggro_walk;
        // attack
        moving = true;
    }
}
if(turning == true){
    if(image_index &gt;7){
        turning = false;
        _draw_sprite = spr_spider_aggro_walk;
    }
}
sprite_index = _draw_sprite;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// "SOFT WALLS"
// left wall
if( self.x &lt; 0 ){
    self.x = 0;
    hspeed = 0;
}
//right wall
if( self.x &gt; room_width){
    self.x = room_width;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_regular_shot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate health and die if necessary
cur_health -= 1;
if(cur_health == 0){
    _draw_sprite = spr_spider_death;
    image_index = 0;
    dead = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if we are on top of the floor    
if(gravity==1){
        gravity = 0;
        self.y = other.y-20;   
        motion_set(0,0);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead==false &amp;&amp; global._jump ==false){
    if(mov_dir == "left"){ 
        self.x = other.x+200;
    }else{
        self.x = other.x-200;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead_animation_finished==true){
    draw_sprite_ext(_draw_sprite,10,self.x,self.y, image_xscale, image_yscale, 0, c_white,1);
}else{
    draw_sprite_ext(_draw_sprite,image_index,self.x,self.y, image_xscale, image_yscale, 0, c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>79,79</point>
  </PhysicsShapePoints>
</object>
