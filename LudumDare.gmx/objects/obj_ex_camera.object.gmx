<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// create
_view = 0;
_view_object = -1;

_view_x_offset = 0;
_view_y_offset = 0;

_flash_time = 0;
_flash_start = 0;
_flash_end = 0;
_flash_alpha = 0;
_flash_color = c_white;
_flash_duration = 12;
_flash_blend = bm_add;
_flash_draw_target = 0;
_fx_flash = false;

_fade_time = 0;
_fade_ext_time = 0;
_fade_alpha = 0;
_fade_start = 0;
_fade_end = 0;
_fade_color = c_black;
_fade_duration = 30;
_fade_blend = bm_normal;
_fade_draw_target = 0;
_fade_ext = false;
_fade_room = -1;
_fade_delay = 0;
_fx_fade = false;

_shake_time = 0;
_shake_start_x = x;
_shake_start_y = y;
_shake_power_x = 5;
_shake_power_y = 5;
_shake_power_angle = 1;
_shake_duration = 30;
_shake_effect_x = 0;
_shake_effect_y = 0;
_fx_shake = false;

_zoom_time = 0;
_zoom = 100;
_zoom_start = 100;
_zoom_end = 100;
_zoom_duration = 30;
_fx_zoom = true;

_tilt_time = 0;
_tilt = view_angle[_view];
_tilt_start = _tilt;
_tilt_end = _tilt;
_tilt_duration = 30;
_fx_tilt = false;

_scroll_time = 0;
_scroll_start_x = x;
_scroll_start_y = y;
_scroll_end_x = 0;
_scroll_end_y = 0;
_scroll_duration = 30;
_fx_scroll = false;

_scroll_to_time = 0;
_scroll_to_start_x = x;
_scroll_to_start_y = y;
_scroll_to_end_x = 0;
_scroll_to_end_y = 0;
_scroll_to_duration = 30;
_fx_scroll_to = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

// step
///Handle Camera Effects

if (instance_exists(_view_object)) {

    x = _view_object.x;
    y = _view_object.y;
    
    view_xview[_view] = (_view_object.x - view_wview[0] / 2)+_view_x_offset+_shake_effect_x;
    view_yview[_view] = (_view_object.y - view_hview[0] / 2)+_view_y_offset+_shake_effect_y;

} else {

    view_xview[_view] = (x - view_wview[0] / 2)+_view_x_offset+_shake_effect_x;
    view_yview[_view] = (y - view_hview[0] / 2)+_view_y_offset+_shake_effect_y;    

}

/* -----------------------------------------
   Scroll
----------------------------------------- */

if (_fx_scroll == true) {
    
    _scroll_time+= 1;
    
    _view_x_offset = lerp(_scroll_start_x, _scroll_end_x, ex_camera_smoothstep(0, 1, _scroll_time / _scroll_duration));
    _view_y_offset = lerp(_scroll_start_y, _scroll_end_y, ex_camera_smoothstep(0, 1, _scroll_time / _scroll_duration));

    if (_scroll_time &gt;= _scroll_duration) {
        _fx_scroll = false;
    }

}

/* -----------------------------------------
   Zoom
----------------------------------------- */

if (_fx_zoom == true) {
    
    _zoom_time+= 1;
    
    _zoom = lerp(_zoom_start, _zoom_end, ex_camera_smoothstep(0, 1, _zoom_time / _zoom_duration));
    
    view_wview[_view] = view_wport[_view]*(_zoom / 100);
    view_hview[_view] = view_hport[_view]*(_zoom / 100);
    
    if (_zoom_time &gt;= _zoom_duration) {
        _fx_zoom = false;
    }

}

/* -----------------------------------------
   Tilt
----------------------------------------- */

if (_fx_tilt == true) {
    
    _tilt_time+= 1;
    
    _tilt = lerp(_tilt_start, _tilt_end, ex_camera_smoothstep(0, 1, _tilt_time / _tilt_duration));
    
    view_angle[_view] = _tilt;
    
    if (_tilt_time &gt;= _tilt_duration) {
        _fx_tilt = false;
    }

}

/* -----------------------------------------
   Fade
----------------------------------------- */

if (_fx_fade == true) {
    
    _fade_time+= 1;
    
    _fade_alpha = lerp(_fade_start, _fade_end, ex_camera_smoothstep(0, 1, _fade_time / _fade_duration));
    
    if (_fade_time &gt;= _fade_duration) {
        
        if (_fade_ext == true) {
            
            _fade_ext_time+= 1;
            
            if (_fade_ext_time &gt;= _fade_delay) {
                _fx_fade = false;
                room_goto(_fade_room);
            }
            
        } else {
            _fx_fade = false;
        }
    }

}

/* -----------------------------------------
   Flash
----------------------------------------- */

if (_fx_flash == true) {
    
    _flash_time+= 1;
    
    _flash_alpha = lerp(_flash_start, _flash_end, ex_camera_smoothstep(0, 1, _flash_time / _flash_duration));
    
    if (_flash_time &gt;= _flash_duration) {
        _fx_flash = false;
    }

}


/* -----------------------------------------
   Shake
----------------------------------------- */

if (_fx_shake == true) {
    
    _shake_time+= 1;
    
    if (_shake_power_x &gt; 0) {
        _shake_effect_x = random_range(-_shake_power_x, _shake_power_x);
    }
    if (_shake_power_y &gt; 0) {
        _shake_effect_y = random_range(-_shake_power_y, _shake_power_y);
    }
    if (_shake_power_angle &gt; 0) {
        view_angle[_view] = _tilt + random_range(-_shake_power_angle, _shake_power_angle);
    }
    
    if (_shake_time &gt;= _shake_duration) {
        view_angle[_view] = _tilt;
        _shake_effect_x = 0;
        _shake_effect_y = 0;
        _fx_shake = false;
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw gui
///Handle Draw GUI Camera Effects

/* -----------------------------------------
   Fade
----------------------------------------- */

if (_fade_alpha &gt; 0 and _fade_draw_target == 1) {
    draw_set_alpha(_fade_alpha);
    draw_set_blend_mode(_fade_blend);
    draw_set_color(_fade_color);
    draw_rectangle(
        view_xview[_view]-64,
        view_yview[_view]-64,
        view_xview[_view]+view_wview[_view]+64,
        view_yview[_view]+view_hview[_view]+64,
        false
    );
}

/* -----------------------------------------
   Flash
----------------------------------------- */

if (_flash_alpha &gt; 0 and _flash_draw_target == 1) {
    draw_set_alpha(_flash_alpha);
    draw_set_blend_mode(_flash_blend);
    draw_set_color(_flash_color);
    draw_rectangle(
        view_xview[_view]-64,
        view_yview[_view]-64,
        view_xview[_view]+view_wview[_view]+64,
        view_yview[_view]+view_hview[_view]+64,
        false
    );
}

draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_set_color(c_white);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw
///Draw Camera Effects

/* -----------------------------------------
   Fade
----------------------------------------- */

if (_fade_alpha &gt; 0 and _fade_draw_target == 0) {
    draw_set_alpha(_fade_alpha);
    draw_set_blend_mode(_fade_blend);
    draw_set_color(_fade_color);
    draw_rectangle(
        view_xview[_view]-64,
        view_yview[_view]-64,
        view_xview[_view]+view_wview[_view]+64,
        view_yview[_view]+view_hview[_view]+64,
        false
    );
}

/* -----------------------------------------
   Flash
----------------------------------------- */

if (_flash_alpha &gt; 0 and _flash_draw_target == 0) {
    draw_set_alpha(_flash_alpha);
    draw_set_blend_mode(_flash_blend);
    draw_set_color(_flash_color);
    draw_rectangle(
        view_xview[_view]-64,
        view_yview[_view]-64,
        view_xview[_view]+view_wview[_view]+64,
        view_yview[_view]+view_hview[_view]+64,
        false
    );
}

draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_set_color(c_white);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
